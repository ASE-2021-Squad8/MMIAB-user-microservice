openapi: "3.0.1"
info:
  title: Users Service API
  description: Users Microservice of Message in a Bottle Application
  version: "0.1"

servers:
  - url: /api

paths:
  /user:
    post:
      tags: [Users]
      summary: Add a new user
      operationId: mib.resources.users.create_user
      requestBody:
        description: Create a new user inside microservice app
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - email
                - dateofbirth
                - password
              properties:
                firstname:
                  type: string
                  description: First name of user
                  example: Mario
                lastname:
                  type: string
                  description: Last name of user
                  example: Rossi
                email:
                  type: string
                  description: User email
                  example: mario.rossi@example.org
                  format: email
                dateofbirth:
                  type: string
                  description: User birthdate
                  example: '2020-01-01'
                  format: datetime
                password:
                  type: string
                  description: User password
                  example: 'abcd1234'
                  minLength: 1
                  maxLength: 127
      responses:
        201:
          description: Created
        200:
          description: User already exists
        default:
          description: Error during creation of the user

  /authenticate:
    post:
      tags: [ Users ]
      summary: Authenticate a user
      operationId: mib.resources.auth.authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: auth
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: mario.rossi@example.org
                password:
                  type: string
                  example: abcd123A
      responses:
        200:
          description: User credentials are correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  user:
                    $ref: '#/components/schemas/User'

        400:
          description: User credentials are not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
        default:
          description: An error occured during login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string
          
  /user/data/{user_id}:
    put:
      tags: [ Users ]
      summary: Modify user data
      description: Change the account data of a user
      operationId: mib.resources.users.change_data_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - textemail
                - textfirstname
                - textlastname
                - textbirth
              properties:
                textemail:
                  type: string
                  format: email
                  example: mario.rossi@example.org
                textfirstname:
                  type: string
                  example: mario
                textlastname:
                  type: string
                  example: rossi
                textbirth:
                  type: string
                  format: datetime
                  example: "2020-01-01"
      responses:
        200:
          description: User data modified
        404:
          description: User_id not found
        409:
          description: The email already exists in the database
        default: 
          description: An error occurred

  /user/password/{user_id}:
    put:
      tags: [ Users ]
      summary: Change user password
      description: Change the password of a user
      operationId: mib.resources.users.change_pass_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentpassword
                - newpassword
                - confirmpassword
              properties:
                currentpassword:
                  type: string
                  example: abcd1234
                newpassword:
                  type: string
                  example: abcd1234
                confirmpassword:
                  type: string
                  example: abcd1234
      responses:
        200:
          description: User password modified
        404:
          description: User_id not found
        401:
          description: Wrong current password
        422:
          description: New password and confirmation password does not match
        default: 
          description: An error occurred
          
  /user/report:
    put:
      tags: [ Users ]
      summary: Report a user
      description: Report a user by its email
      operationId: mib.resources.users.report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - useremail
              properties:
                useremail:
                  type: string
                  example: mario.rossi@example.org
      responses:
        200:
          description: User reported
        404:
          description: Reported email not found
        default: 
          description: An error occurred

  /user/content_filter/{user_id}:
    put:
      tags: [ Users ]
      summary: Set content filter for user
      description: Change the content filter of a user
      operationId: mib.resources.users.content_filter
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - filter
              properties:
                filter:
                  type: integer
                  example: 0
      responses:
        200:
          description: Content filter set
        404:
          description: User_id not found
        default: 
          description: An error occurred

  /user/points/{user_id}:
    put:
      tags: [ Users ]
      summary: Change number of points for user
      description: Change number of points for user
      operationId: mib.resources.users.add_points
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - points
              properties:
                points:
                  type: integer
                  example: 0
      responses:
        200:
          description: Points changed
        404:
          description: User_id not found
        default: 
          description: An error occurred

  /user/black_list/{user_id}:
    get:
      tags: [ User Query ]
      summary: Get the blacklist for a user
      description: Get the blacklist for a user
      operationId: mib.resources.users.get_black_list
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return the blacklist for user_id
          content: 
            application/json:
              schema:
                type: object
                properties:
                  candidates:
                    type: array
                    items: 
                      properties:
                        id:
                          type: integer
                          format: int64
                          example: 10
                        mail:
                          type: string
                          format: email
                          example: mario.rossi@example.org
                  blacklisted:
                    type: array
                    items: 
                      properties:
                        id:
                          type: integer
                          format: int64
                          example: 10
                        mail:
                          type: string
                          format: email
                          example: mario.rossi@example.org
        404:
          description: User not found
        default:
          description: An error occurred
    put:
      tags: [ Users ]
      summary: Put/delete users in/from blacklist
      description: Put/delete users in/from the blacklist of user_id
      operationId: mib.resources.users.modify_black_list
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - op
                - users
              properties:
                op:
                  type: string
                  example: "add/delete"
                users:
                  type: array
                  items:
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 10
      responses:
        200:
          description: Operation successfull
        404:
          description: User not found
        default:
          description: An error occurred





  /user/{user_id}:
    get:
      tags: [ User Query ]
      summary: Get a user by its id
      description: Get a user by its id
      operationId: mib.resources.users.get_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        default:
          description: An error occured while retrieving the user
    delete:
      tags: [ Users ]
      summary: Unregister a user
      description: Unregister a user by its id (set is_active to false)
      operationId: mib.resources.users.unregister
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User unregistered
        404:
          description: User_id not found
        default:
          description: An error occurred while retrieving the user

  /user/{user_id}/public:
    get:
      tags: [ User Query ]
      summary: Get a user's public details
      description: Get a user's public details by its id
      operationId: mib.resources.users.get_user_details
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user's public details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User_Public"
        404:
          description: User not found
        default:
          description: An error occured while retrieving the user

  /user/{user_id}/email:
    get:
      tags: [ User Query ]
      summary: Get email of user
      description: Get the email of a user by its id
      operationId: mib.resources.users.get_user_email
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user email
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                    example: mario.rossi@example.org
        404:
          description: User not found
        default:
          description: An error occured while retrieving the user
  
  /user/{user_id}/recipients:
    get:
      tags: [ User Query ]
      summary: Get the recipients for a user
      description: Get all the possible recipients for a user_id
      operationId: mib.resources.users.get_recipients
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return the list of recipients
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 10
                    email:
                      type: string
                      format: email
                      example: mario.rossi@example.org
        404:
          description: User_id not found
        default:
          description: An error occurred

  /user_email/{user_email}:
    get:
      tags: [ User Query ]
      summary: Get user by email
      description: Get a user by its email
      operationId: mib.resources.users.get_user_by_email
      parameters:
        - name: user_email
          description: User unique email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        default:
          description: An error occured while retrieving the user

  /user/list/:
    get:
      tags: [ User Query ]
      summary: Get users list
      description: Get all the users
      operationId: mib.resources.users.get_all_users
      responses:
        200:
          description: Return users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: An error occurred

  /user/list/public:
    get:
      tags: [ User Query ]
      summary: Get public users list
      description: Get all the users public details
      operationId: mib.resources.users.get_users_list_json
      responses:
        200:
          description: Return users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User_Public'
        default:
          description: An error occurred
          
  /user/list/banned:
    get:
      tags: [ User Query ]
      summary: Get banned users list
      description: Get all the banned users
      operationId: mib.resources.users.get_banned_users
      responses:
        200:
          description: Return banned users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: An error occurred

  /user/list/unregistered:
    get:
      tags: [ User Query ]
      summary: Get unregistered users list
      description: Get all the unregistered users (inactive but not banned)
      operationId: mib.resources.users.get_unregistered_users
      responses:
        200:
          description: Return unregistered users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: An error occurred
  
  
# COMPONENTS

components:
  schemas:
    User:
      required:
        - firstname
        - lastname
        - email
        - dateofbirth
        - password
        - reports
        - is_active
        - points
        - content_filter
      type: object
      properties:
        firstname:
          type: string
          description: First name of user
          example: Mario
        lastname:
          type: string
          description: Last name of user
          example: Rossi
        email:
          type: string
          description: User email
          example: mario.rossi@example.org
          format: email
        dateofbirth:
          type: string
          description: User birthdate
          example: '2020-01-01'
          format: datetime
        password:
          type: string
          description: User password
          example: 'abcd1234'
          minLength: 1
          maxLength: 127
        reports:
          type: integer
          description: Number of reports received
          example: 0
        is_active:
          type: boolean
          description: If the user's account is active or not
          example: true
        points:
          type: integer
          description: Lottery points owned by a user
          example: 0
        content_filter:
          type: boolean
          description: Content filter activation
          example: false
    User_Public:
      required:
        - firstname
        - lastname
        - email
      type: object
      properties:
        firstname:
          type: string
          description: First name of user
          example: Mario
        lastname:
          type: string
          description: Last name of user
          example: Rossi
        email:
          type: string
          description: User email
          example: mario.rossi@example.org
          format: email
